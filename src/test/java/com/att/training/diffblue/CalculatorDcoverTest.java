package com.att.training.diffblue;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.anyInt;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

/**
 * This test was generated by the Dcover cli (2021.06.01-21cddf2)using the following command:<br>
 * {@code dcover create --class-name-template='${CLASS_NAME}DcoverTest' --skip-test-validation}
 * {@link Calculator} is a simple class, no dependencies - a pure unit test would be more appropriate.
 * Another minor issue: tests are generated with an indentation of 2 spaces, while the project uses 4.
 */
@ContextConfiguration(classes = {Calculator.class})
@ExtendWith(SpringExtension.class)
public class CalculatorDcoverTest {
    @Autowired
    private Calculator calculator;

    @Test
    public void testAdd() {
        // It would be great if I could choose the assertion framework (e.g. assertj).
        // Otherwise I have to rewrite all the assertions.
        // compare to the jcover-generated CalculatorJcoverTest (where --assertj was specified)
        // Arrange, Act and Assert
        assertEquals(5, this.calculator.add(2, 3));
    }

    @Test
    public void testAbs() {
        // Arrange, Act and Assert
        assertEquals(42, this.calculator.abs(42));
        assertEquals(1, this.calculator.abs(-1));
    }

    @Test
    public void testIncrement() {
        // Arrange, Act and Assert
        assertEquals(3, this.calculator.increment(2));
    }

    @Test
    public void testDecrement() {
        // Arrange, Act and Assert
        assertEquals(1, this.calculator.decrement(2));
    }

    @Test
    public void testAddAndSet() {
        // Arrange
        Repository repository = mock(Repository.class);
        // Like in the intellij generated test - this should not be generated
        doNothing().when(repository).setResult(anyInt());

        // Act and Assert
        assertEquals(5, this.calculator.addAndSet(2, 3, repository));
        verify(repository).setResult(anyInt());
    }
}

