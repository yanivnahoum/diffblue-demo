package com.att.training.diffblue;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.anyInt;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * This test was generated by the Diffblue intellij plugin (v2021.06.01-teams.2021.1)<br>
 * {@link Calculator} is a simple class, no dependencies - a pure unit test would be more appropriate.
 */
@ContextConfiguration(classes = {Calculator.class})
@ExtendWith(SpringExtension.class)
public class CalculatorDiffblueTest {
    @Autowired
    private Calculator calculator;

    @Test
    public void testAdd() {
        int x = 2;
        int y = 3;
        int actualAddResult = this.calculator.add(x, y);
        // It would be great if I could choose the assertion framework (e.g. assertj).
        // Otherwise I have to rewrite all the assertions.
        // compare to the jcover-generated CalculatorJcoverTest (where --assertj was specified)
        assertEquals(5, actualAddResult);
    }

    @Test
    public void testAbs() {
        int value = 42;
        int actualAbsResult = this.calculator.abs(value);
        assertEquals(42, actualAbsResult);
    }

    @Test
    public void testAbs2() {
        int value = -1;
        int actualAbsResult = this.calculator.abs(value);
        assertEquals(1, actualAbsResult);
    }

    @Test
    public void testIncrement() {
        int x = 2;
        int actualIncrementResult = this.calculator.increment(x);
        assertEquals(3, actualIncrementResult);
    }

    @Test
    public void testDecrement() {
        int x = 2;
        int actualDecrementResult = this.calculator.decrement(x);
        assertEquals(1, actualDecrementResult);
    }

    @Test
    public void testAddAndSet() {
        int x = 2;
        int y = 3;
        Repository repository = mock(Repository.class);
        // This does nothing and should not be generated
        doNothing().when(repository).setResult(anyInt());
        int actualAddAndSetResult = this.calculator.addAndSet(x, y, repository);
        assertEquals(5, actualAddAndSetResult);
        verify(repository).setResult(anyInt());
    }
}

