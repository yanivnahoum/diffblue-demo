package com.att.training.diffblue;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

/**
 * This test was generated by the Diffblue intellij plugin (v2021.06.01-teams.2021.1)
 * All tests fail since {@link Calculator}, a dependency of the {@link CalculatorController},
 * is missing from the Spring context.
 */
@ContextConfiguration(classes = {CalculatorController.class})
// Should be:
//@ContextConfiguration(classes = {CalculatorController.class, Calculator.class})
@ExtendWith(SpringExtension.class)
public class CalculatorControllerDiffblueTest {
    @Autowired
    private CalculatorController calculatorController;

    /**
     * Compare this generated code with the one generated by jcover in {@link CalculatorControllerJcoverTest},
     * which is much more elegant.
     * MockMvc has a DSL that is meant to be statically imported, and chained (fluent api).
     */
    @Test
    public void testAbs() throws Exception {
        MockHttpServletRequestBuilder getResult = MockMvcRequestBuilders.get("/calc/abs");
        MockHttpServletRequestBuilder requestBuilder = getResult.param("value", String.valueOf(1));
        MockMvc buildResult = MockMvcBuilders.standaloneSetup(this.calculatorController).build();
        ResultActions actualPerformResult = buildResult.perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().contentType("application/json"))
                .andExpect(MockMvcResultMatchers.content().string("1"));
    }

    @Test
    public void testAbs2() throws Exception {
        MockHttpServletRequestBuilder getResult = MockMvcRequestBuilders.get("/calc/abs", "Uri Vars");
        MockHttpServletRequestBuilder requestBuilder = getResult.param("value", String.valueOf(1));
        MockMvc buildResult = MockMvcBuilders.standaloneSetup(this.calculatorController).build();
        ResultActions actualPerformResult = buildResult.perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().contentType("application/json"))
                .andExpect(MockMvcResultMatchers.content().string("1"));
    }

    @Test
    public void testAbs3() throws Exception {
        MockHttpServletRequestBuilder getResult = MockMvcRequestBuilders.get("/calc/abs");
        MockHttpServletRequestBuilder requestBuilder = getResult.param("value", String.valueOf(-1));
        MockMvc buildResult = MockMvcBuilders.standaloneSetup(this.calculatorController).build();
        ResultActions actualPerformResult = buildResult.perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().contentType("application/json"))
                .andExpect(MockMvcResultMatchers.content().string("1"));
    }

    @Test
    public void testAdd() throws Exception {
        MockHttpServletRequestBuilder getResult = MockMvcRequestBuilders.get("/calc/add");
        MockHttpServletRequestBuilder paramResult = getResult.param("x", String.valueOf(1));
        MockHttpServletRequestBuilder requestBuilder = paramResult.param("y", String.valueOf(1));
        MockMvc buildResult = MockMvcBuilders.standaloneSetup(this.calculatorController).build();
        ResultActions actualPerformResult = buildResult.perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().contentType("application/json"))
                .andExpect(MockMvcResultMatchers.content().string("2"));
    }
}

