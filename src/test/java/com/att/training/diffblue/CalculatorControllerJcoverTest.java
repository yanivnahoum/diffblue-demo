package com.att.training.diffblue;

import static org.mockito.Mockito.anyInt;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

/**
 * This class we generated by jcover (v0.7 3ffd6536) using the following command: <br>
 * {@code jcover --test-verification --no-factory-tests --use-var --assertj --class-suffix 'JcoverTest'}
 * <br>
 * Unit tests for com.att.training.diffblue.CalculatorController
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {CalculatorController.class})
@ExtendWith(SpringExtension.class)
class CalculatorControllerJcoverTest {

    @MockBean(name = "calculator")
    private Calculator calculator;

    @Autowired
    private CalculatorController controller;

    @Test
    void add() throws Exception {
        when(calculator.add(anyInt(), anyInt()))
            .thenReturn(-1);
        MockMvcBuilders.standaloneSetup(controller)
            .build().perform(
            MockMvcRequestBuilders.get("/calc/add")
                .param("x", Integer.toString(0))
                .param("y", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json"))
            .andExpect(content().json("-1"));
    }

    @Test
    void abs() throws Exception {
        when(calculator.abs(anyInt()))
            .thenReturn(0);
        MockMvcBuilders.standaloneSetup(controller)
            .build().perform(
            MockMvcRequestBuilders.get("/calc/abs")
                .param("value", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json"))
            .andExpect(content().json("0"));
    }
}
